@charset "utf-8";
//————————————————————————————————————————————
// break point
//————————————————————————————————————————————

@mixin bp ( $type: min, $num1: false, $num2: false ) {
  @if $type != max and $type != min and $num1 != false {
    $num2: $num1;
    $num1: $type;
    $type: min;
  } @else if $type != max and $type != min and $num1 == false {
    $num2: null;
    $num1: $type;
    $type: min;
  }

  @if $type == min {
    $min: $num1;
    $max: $num2;

    @if $max and $min and $max < $min {
      $min: $num2;
      $max: $num1;
    }

    @if $max == false or $max == null {
      @media screen and (min-width: $min) { @content; }
    } @else {
      @media screen and (min-width: $min) and (max-width: $max) { @content; }
    }
  } @elseif $type == max {
    $min: $num2;
    $max: $num1;

    @if $min and $max < $min {
      $min: $num1;
      $max: $num2;
    }

    @if $min == false or $min == nul {
      @media screen and (max-width: $max) { @content; }
    } @else {
      @media screen and (min-width: $min) and (max-width: $max) { @content; }
    }
  }
}

@mixin breakMax( $max, $min: false ) {
  @if $min == false {
    @media screen and (max-width: $max) { @content; }
  } @else {
    @media screen and (max-width: $max) and (min-width: $min) { @content; }
  }
}

@mixin breakMin( $min, $max: false ) {
  @if $max == false {
    @media screen and (min-width: $min) { @content; }
  } @else {
    @media screen and (max-width: $max) and (min-width: $min) { @content; }
  }
}

//————————————————————————————————————————————
// FontSize
//————————————————————————————————————————————
@mixin fsvw( $type: min, $num1: false, $num2: false ) {
  @include bp( $type, $num1, $num2 ) {
    :root {
      font-size: calc( 100% + ( ( 1vw - .48rem ) * 1.389 ) );
    }
  }
}

//————————————————————————————————————————————
// FontAwesome
//————————————————————————————————————————————

$fa: FontAwesome;

@mixin fa($fontCode) {
  @if str-index($fontCode, '\\' ) {
    content: unquote("\"") + unquote($fontCode) + unquote("\"");
  } @else {
    content: unquote("\"") + unquote(str-insert($fontCode, "\\", 1)) + unquote("\"");
  }
  font-family: $fa;
  line-height: 1;
}

//————————————————————————————————————————————
// icomoon
//————————————————————————————————————————————

// @font-face {
//  font-family: 'icomoon';
//  src: url("../fonts/icomoon.eot");
//  src: url("../fonts/icomoon.eot") format("embedded-opentype"), url("../fonts/icomoon.ttf") format("truetype"), url("../fonts/icomoon.woff") format("woff"), url("../fonts/icomoon.svg") format("svg");
//  font-weight: normal;
//  font-style: normal;
// }

$im: icomoon;

@mixin im($fontCode) {
  @if str-index($fontCode, '\\' ) {
    content: unquote("\"") + unquote($fontCode) + unquote("\"");
  } @else {
    content: unquote("\"") + unquote(str-insert($fontCode, "\\", 1)) + unquote("\"");
  }
  font-family: $im;
  line-height: 1;
}

// 上記、$fontCodeの設定詳細は下記URLの『6,7』
// http://qiita.com/nekoneko-wanwan/items/e0f5a71a7d603215bcc3


//————————————————————————————————————————————
//   ／＼
// ／    ＼三角形を作るcss
// ￣￣￣￣
//————————————————————————————————————————————

@mixin tri-base {
  display: block;
  width: 0;
  height: 0;
  border-style: solid;
}

// top
@mixin tri-t($color, $width, $height: false) {
  $height: if($height, $height, $width);
  @include tri-base;
  border-width: 0 $width/2 $height $width/2;
  border-color: transparent transparent $color transparent;
}

// right
@mixin tri-r($color, $width, $height: false) {
  @include tri-base;
  $height: if($height, $height, $width);
  border-width: $height/2 0 $height/2 $width;
  border-color: transparent transparent transparent $color;
}

// bottom
@mixin tri-b($color, $width, $height: false) {
  @include tri-base;
  $height: if($height, $height, $width);
  border-width: $height $width/2 0 $width/2;
  border-color: $color transparent transparent transparent;
}

// left
@mixin tri-l($color, $width, $height: false) {
  @include tri-base;
  $height: if($height, $height, $width);
  border-width: $height/2 $width $height/2 0;
  border-color: transparent $color transparent transparent;
}

// top-right
@mixin tri-tr($color, $width, $height: false) {
  @include tri-base;
  $height: if($height, $height, $width);
  border-width: 0 $width $height 0;
  border-color: transparent $color transparent transparent;
}

// bottom-right
@mixin tri-br($color, $width, $height: false) {
  @include tri-base;
  $height: if($height, $height, $width);
  border-width: 0 0 $height $width;
  border-color: transparent transparent $color transparent;
}

// bottom-left
@mixin tri-bl($color, $width, $height: false) {
  @include tri-base;
  $height: if($height, $height, $width);
  border-width: $height 0 0 $width;
  border-color: transparent transparent transparent $color;
}

// top-left
@mixin tri-tl($color, $width, $height: false) {
  @include tri-base;
  $height: if($height, $height, $width);
  border-width: $height $width 0 0;
  border-color: $color transparent transparent transparent;
}

//————————————————————————————————————————————
// グラデーション
//————————————————————————————————————————————

@mixin linear-gradient($direction, $args) {
  // // 標準のキーワード
  // $standard_keywords:
  //     to bottom, to left, to top, to right,
  //     to top left, to top right, to bottom right, to bottom left,
  //     to left top, to right top, to right bottom, to left bottom;

  // // 接頭辞版のキーワード
  // $legacy_keywords:
  //     top, right, bottom, left,
  //     bottom right, bottom left, top left, top right,
  //     right bottom, left bottom, left top, right top; 

  // top → to bottom 等に変換する処理
  @function angle($str) {
    @if $str == 'top' {
      @return #{unquote('to bottom')};
    } @else if $str == 'right' {
      @return #{unquote('to left')};
    } @else if $str == 'bottom' {
      @return #{unquote('to top')};
    } @else if $str == 'left' {
      @return #{unquote('to right')};
    } @else if $str == 'bottom right' {
      @return #{unquote('to top left')};
    } @else if $str == 'bottom left' {
      @return #{unquote('to top right')};
    } @else if $str == 'top left' {
      @return #{unquote('to bottom right')};
    } @else if $str == 'top right' {
      @return #{unquote('to bottom left')};
    } @else if $str == 'right bottom' {
      @return #{unquote('to left top')};
    } @else if $str == 'left bottom' {
      @return #{unquote('to right top')};
    } @else if $str == 'left top' {
      @return #{unquote('to right bottom')};
    } @else if $str == 'right top' {
      @return #{unquote('to left bottom')};
    }
  }

  // to bottom → top 等に変換する処理
  @function vender_angle($str) {
    @if $str == 'to bottom' {
      @return #{unquote('top')};
    } @else if $str == 'to left' {
      @return #{unquote('right')};
    } @else if $str == 'to top' {
      @return #{unquote('bottom')};
    } @else if $str == 'to right' {
      @return #{unquote('left')};
    } @else if $str == 'to top left' {
      @return #{unquote('bottom right')};
    } @else if $str == 'to top right' {
      @return #{unquote('bottom left')};
    } @else if $str == 'to bottom right' {
      @return #{unquote('top left')};
    } @else if $str == 'to bottom left' {
      @return #{unquote('top right')};
    } @else if $str == 'to left top' {
      @return #{unquote('right bottom')};
    } @else if $str == 'to right top' {
      @return #{unquote('left bottom')};
    } @else if $str == 'to right bottom' {
      @return #{unquote('left top')};
    } @else if $str == 'to left bottom' {
      @return #{unquote('right top')};
    }
  }

  // 色の作成
  $key: map-keys( $args );
  $val: null;
  @function gradient_val($args) {
    @each $pos, $color in $args {
      $separator: '#{$color} #{$pos}';
      $val: join($val, $separator, 'comma');
    }
    @return #{unquote($val)};
  }

  $startColor    : map-get( $args, nth( $key, 1 ) );
  $endColor      : map-get( $args, nth( $key, length($key) ) );
  $gradientColor : gradient_val($args);


  /* Old browsers */
  background: $startColor;

  /* FF3.6-15 */
  @if type-of($direction) == 'number' {
    $angle: (450 - $direction) % 360;
    $angle: if( unitless($angle), #{$angle}deg, #{$angle} );
    background: -moz-linear-gradient( $angle, $gradientColor );
  } @else {
    background: -moz-linear-gradient( vender_angle($direction), $gradientColor );
  }

  /* Chrome10-25,Safari5.1-6 */
  @if type-of($direction) == 'number' {
    $angle: (450 - $direction) % 360;
    $angle: if( unitless($angle), #{$angle}deg, #{$angle} );
    background: -webkit-linear-gradient( $angle, $gradientColor );
  } @else {
    background: -webkit-linear-gradient( vender_angle($direction), $gradientColor );
  }

  /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  @if type-of($direction) == 'number' {
    $angle: if( unitless($direction), #{$direction}deg, #{$direction} );
    background: linear-gradient( $angle, $gradientColor );
  } @else {
    background: linear-gradient( angle($direction), $gradientColor );
  }

  /* IE6-9 */
  @if type-of($direction) == 'number' {
    $angle: if( unitless($direction), #{$direction}deg, #{$direction} );
    @if $angle == 0 {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=0 );
    } @else {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=1 );
    }
  } @else {
    @if $direction == 'top' {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=0 );
    } @else {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=1 );
    }
  }
}

@mixin radial-gradient($direction, $args) {
}