@charset "utf-8";
//————————————————————————————————————————————
// Unit Delete
//————————————————————————————————————————————
@function unit_delete( $num ) {
  @if not(unitless( $num ) ) {
    $_nounit_divisor: ( floor( $num ) * 2 ) % 2 + 1;
    $num: ( $num / $_nounit_divisor );
  }
  @return $num;
}

//————————————————————————————————————————————
// Break Point
//————————————————————————————————————————————

@mixin bp ( $type: min, $num1: false, $num2: false ) {
  @if $type != max and $type != min and $num1 != false {
    $num2: $num1;
    $num1: $type;
    $type: min;
  } @else if $type != max and $type != min and $num1 == false {
    $num2: null;
    $num1: $type;
    $type: min;
  }

  @if $type == min {
    $min: $num1;
    $max: $num2;

    @if $max and $min and $max < $min {
      $min: $num2;
      $max: $num1;
    }

    @if $max == false or $max == null {
      @media screen and (min-width: $min) { @content; }
    } @else {
      @media screen and (min-width: $min) and (max-width: $max) { @content; }
    }
  } @elseif $type == max {
    $min: $num2;
    $max: $num1;

    @if $min and $max < $min {
      $min: $num1;
      $max: $num2;
    }

    @if $min == false or $min == nul {
      @media screen and (max-width: $max) { @content; }
    } @else {
      @media screen and (min-width: $min) and (max-width: $max) { @content; }
    }
  }
}

//————————————————————————————————————————————
// Vw
//————————————————————————————————————————————
@function vw_sp( $num ) {
  @return ( $num / 750 * 100 ) + vw;
}

@mixin vw_sp( $num ) {
  width: vw_sp( $num );
  max-width: ( $num ) + px;
}

@function vw_pc( $num ) {
  @return ( $num / 1200 * 100 ) + vw;
}

@mixin vw_pc( $num ){
  width: vw_pc( $num );
  max-width: ( $num ) + px;
}

//————————————————————————————————————————————
// Per
//————————————————————————————————————————————
@function per_sp( $num ) {
  @return ( $num / 750 * 100 ) + '%';
}

@mixin per_sp( $num ) {
  width: per_sp( $num );
  max-width: ( $num ) + px;
}

@function per_pc( $num ) {
  @return ( $num / 1200 * 100 ) + '%';
}

@mixin per_pc( $num ){
  width: per_pc( $num );
  max-width: ( $num ) + px;
}

//————————————————————————————————————————————
// FontSize
//————————————————————————————————————————————
@mixin fsvw( $type: min, $num1: false, $num2: false ) {
  @include bp( $type, $num1, $num2 ) {
    :root {
      font-size: calc( 100% + ( ( 1vw - .48rem ) * 1.389 ) );
    }
  }
}

//————————————————————————————————————————————
// FontAwesome
//————————————————————————————————————————————

$fa: Font Awesome\ 5 Free, FontAwesome;

@mixin fa( $fontCode ) {
  @if str-index( $fontCode, '\\' ) {
    content: unquote( "\"" ) + unquote( $fontCode ) + unquote( "\"" );
  } @else {
    content: unquote( "\"" ) + unquote( str-insert( $fontCode, "\\", 1 ) ) + unquote( "\"" );
  }
  font-family: $fa;
  line-height: 1;
}

//————————————————————————————————————————————
// icomoon
//————————————————————————————————————————————

// @font-face {
//  font-family: 'icomoon';
//  src: url("../fonts/icomoon.eot");
//  src: url("../fonts/icomoon.eot") format("embedded-opentype"), url("../fonts/icomoon.ttf") format("truetype"), url("../fonts/icomoon.woff") format("woff"), url("../fonts/icomoon.svg") format("svg");
//  font-weight: normal;
//  font-style: normal;
// }

$im: icomoon;

@mixin im( $fontCode ) {
  @if str-index( $fontCode, '\\' ) {
    content: unquote( "\"" ) + unquote( $fontCode ) + unquote( "\"" );
  } @else {
    content: unquote( "\"" ) + unquote( str-insert( $fontCode, "\\", 1 ) ) + unquote( "\"" );
  }
  font-family: $im;
  line-height: 1;
}

// 上記、$fontCodeの設定詳細は下記URLの『6,7』
// http://qiita.com/nekoneko-wanwan/items/e0f5a71a7d603215bcc3


//————————————————————————————————————————————
// Triangle
//————————————————————————————————————————————

@mixin tri-base {
  display: block;
  width: 0;
  height: 0;
  border-style: solid;
}

// top
@mixin tri-t( $color, $width, $height: false ) {
  $height: if( $height, $height, $width );
  @include tri-base;
  border-width: 0 $width/2 $height $width/2;
  border-color: transparent transparent $color transparent;
}

// right
@mixin tri-r( $color, $width, $height: false ) {
  @include tri-base;
  $height: if( $height, $height, $width );
  border-width: $height/2 0 $height/2 $width;
  border-color: transparent transparent transparent $color;
}

// bottom
@mixin tri-b( $color, $width, $height: false ) {
  @include tri-base;
  $height: if( $height, $height, $width );
  border-width: $height $width/2 0 $width/2;
  border-color: $color transparent transparent transparent;
}

// left
@mixin tri-l( $color, $width, $height: false ) {
  @include tri-base;
  $height: if( $height, $height, $width );
  border-width: $height/2 $width $height/2 0;
  border-color: transparent $color transparent transparent;
}

// top-right
@mixin tri-tr( $color, $width, $height: false ) {
  @include tri-base;
  $height: if( $height, $height, $width );
  border-width: 0 $width $height 0;
  border-color: transparent $color transparent transparent;
}

// bottom-right
@mixin tri-br( $color, $width, $height: false ) {
  @include tri-base;
  $height: if( $height, $height, $width );
  border-width: 0 0 $height $width;
  border-color: transparent transparent $color transparent;
}

// bottom-left
@mixin tri-bl( $color, $width, $height: false ) {
  @include tri-base;
  $height: if( $height, $height, $width );
  border-width: $height 0 0 $width;
  border-color: transparent transparent transparent $color;
}

// top-left
@mixin tri-tl( $color, $width, $height: false ) {
  @include tri-base;
  $height: if( $height, $height, $width );
  border-width: $height $width 0 0;
  border-color: $color transparent transparent transparent;
}

//————————————————————————————————————————————
// Gradation系
//————————————————————————————————————————————
@function angle( $str ) {
  /**
   * top → to bottom 等に変換する処理
   *
   * 変換後のパターン
   * to bottom, to left, to top, to right,
   * to top left, to top right, to bottom right, to bottom left,
   * to left top, to right top, to right bottom, to left bottom
   */
  @if $str == 'top' {
    @return #{unquote('to bottom')};
  } @else if $str == 'right' {
    @return #{unquote('to left')};
  } @else if $str == 'bottom' {
    @return #{unquote('to top')};
  } @else if $str == 'left' {
    @return #{unquote('to right')};
  } @else if $str == 'bottom right' {
    @return #{unquote('to top left')};
  } @else if $str == 'bottom left' {
    @return #{unquote('to top right')};
  } @else if $str == 'top left' {
    @return #{unquote('to bottom right')};
  } @else if $str == 'top right' {
    @return #{unquote('to bottom left')};
  } @else if $str == 'right bottom' {
    @return #{unquote('to left top')};
  } @else if $str == 'left bottom' {
    @return #{unquote('to right top')};
  } @else if $str == 'left top' {
    @return #{unquote('to right bottom')};
  } @else if $str == 'right top' {
    @return #{unquote('to left bottom')};
  } @else {
    @return $str;
  }
}

@function vender_angle( $str ) {
  /**
   * to bottom → top 等に変換する処理
   *
   * 変換後のパターン
   * top, right, bottom, left,
   * bottom right, bottom left, top left, top right,
   * right bottom, left bottom, left top, right top
   */
  @if $str == 'to bottom' {
    @return #{unquote('top')};
  } @else if $str == 'to left' {
    @return #{unquote('right')};
  } @else if $str == 'to top' {
    @return #{unquote('bottom')};
  } @else if $str == 'to right' {
    @return #{unquote('left')};
  } @else if $str == 'to top left' {
    @return #{unquote('bottom right')};
  } @else if $str == 'to top right' {
    @return #{unquote('bottom left')};
  } @else if $str == 'to bottom right' {
    @return #{unquote('top left')};
  } @else if $str == 'to bottom left' {
    @return #{unquote('top right')};
  } @else if $str == 'to left top' {
    @return #{unquote('right bottom')};
  } @else if $str == 'to right top' {
    @return #{unquote('left bottom')};
  } @else if $str == 'to right bottom' {
    @return #{unquote('left top')};
  } @else if $str == 'to left bottom' {
    @return #{unquote('right top')};
  } @else {
    @return $str;
  }
}

// 連想配列の文字列連結
@function gradient_val( $array ) {
  $val: null;
  @each $pos, $color in $array {
    $separator: '#{$color} #{$pos}';
    $val: join( $val, $separator, 'comma');
  }
  @return #{unquote( $val )};
}

//————————————————————————————————————————————
// Linear Gradient
//————————————————————————————————————————————
@mixin linear-gradient( $direction, $args ) {
  // $direction には数字またはテキストが入ります。
  // 数字の場合 -> '0', '20deg'... 
  // テキストの場合 -> 'top', 'to bottom'... 

  // $args : ( 'set_point' : 'color', );
  // $argsは連想配列になります。
  // keyに反映したい位置、valueにカラーが入ります。
  // 連想配列なので複数設定可能です。


  // 色の作成
  $key: map-keys( $args );

  $startColor    : map-get( $args, nth( $key, 1 ) );
  $endColor      : map-get( $args, nth( $key, length( $key ) ) );
  $gradientColor : gradient_val( $args );

  /* Old browsers */
  background: unquote( $startColor );

  /* FF3.6-15 */
  @if type-of( $direction) == 'number' {
    $angle: (450 - $direction) % 360;
    $angle: if( unitless( $angle ), #{$angle}deg, #{$angle} );
    background: -moz-linear-gradient( $angle, $gradientColor );
  } @else {
    background: -moz-linear-gradient( vender_angle( $direction ), $gradientColor );
  }

  /* Chrome10-25,Safari5.1-6 */
  @if type-of( $direction ) == 'number' {
    $angle: ( 450 - $direction ) % 360;
    $angle: if( unitless( $angle ), #{$angle}deg, #{$angle} );
    background: -webkit-linear-gradient( $angle, $gradientColor );
  } @else {
    background: -webkit-linear-gradient( vender_angle( $direction ), $gradientColor );
  }

  /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  @if type-of( $direction ) == 'number' {
    $angle: if( unitless( $direction ), #{$direction}deg, #{$direction} );
    background: linear-gradient( $angle, $gradientColor );
  } @else {
    background: linear-gradient( angle( $direction ), $gradientColor );
  }

  /* IE6-9 */
  @if type-of( $direction ) == 'number' {
    $angle: if( unitless( $direction ), #{$direction}deg, #{$direction} );
    @if $angle == 0 {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=0 );
    } @else {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=1 );
    }
  } @else {
    @if $direction == 'top' {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=0 );
    } @else {
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}',GradientType=1 );
    }
  }
}

//————————————————————————————————————————————
// Radial Gradient
//————————————————————————————————————————————
@mixin radial-gradient( $direction, $args ) {
}

//————————————————————————————————————————————
// Repeating Background
//————————————————————————————————————————————
@function repeating-linear( $color: ( '#FFF', '#000' ), $direction: 45, $size: false ) {
  $size: if( $size, unit_delete( $size ), 100 / length( $color ) );

  $args: ();
  @each $color_i in $color {
    $key: ( length( $args ) ) * $size;
    $each_args: ( $key: $color_i );
    $args: map-merge( $args, $each_args );
  }

  $st:'';
  @each $point, $color in $args {
    // map index
    $index: index( $args, $point $color );
    // first
    @if $index == 1 {
      $st: #{$color}, #{$color};
    }
    // last
    @else if $index == length( $args ) {
      $p: $point / ( length( $args ) - 1 );
      $st: $st #{$point + px}, #{$color $point + px}, #{$color $point + $p + px};
    }
    @else {
      $st: $st #{$point + px}, #{$color $point + px}, #{$color};
    }
  }

  $context: unquote('repeating-linear-gradient(') #{$direction}deg, #{$st} unquote(')');
  @return $context;
}

@function repeating-radial( $color: ( '#FFF', '#000' ), $direction: ellipse, $size: false ) {
  $size: if( $size, unit_delete( $size ),  100 / length( $color ) );
  $direction: if( type-of( $direction ) == string, $direction, 'ellipse' );

  $args: ();
  @each $color_i in $color {
    $key: length( $args ) * $size;
    $each_args: ( $key: $color_i );
    $args: map-merge( $args, $each_args );
  }

  $st:'';
  @each $point, $color in $args {
    // map index
    $index: index( $args, $point $color );
    // first
    @if $index == 1 {
      $st: #{$color}, #{$color};
    }
    // last
    @else if $index == length( $args ) {
      $p: $point / ( length( $args ) - 1 );
      $st: $st #{$point + px}, #{$color $point + px}, #{$color $point + $p + px};
    }
    @else {
      $st: $st #{$point + px}, #{$color $point + px}, #{$color};
    }
  }

  $context: unquote('repeating-radial-gradient(') #{$direction}, #{$st} unquote(')');
  @return $context;
}

//————————————————————————————————————————————
// Text Border
//————————————————————————————————————————————
// 5pxぐらいが限界。。。
@mixin text-border( $width, $color ) {
  $left-top     : null;
  $top-right    : null;
  $right-bottom : null;
  $bottom-left  : null;
  @for $i from 0 through $width {
    @if $left-top == null {
      $left-top: #{$color} #{-$width + $i + px} #{0 - $i + px};
    } @else {
      $left-top: #{$left-top}#{unquote(',')} #{$color} #{-$width + $i + px} #{0 - $i + px};
    }
  }
  @for $i from 0 through $width {
    @if $left-top == null {
      $top-right: #{$color} #{0 + $i + px} #{-$width + $i + px};
    } @else {
      $top-right: #{$top-right}#{unquote(',')} #{$color} #{0 + $i + px} #{-$width + $i + px};
    }
  }
  @for $i from 0 through $width {
    @if $left-top == null {
      $right-bottom: #{$color} #{$width - $i + px} #{0 + $i + px};
    } @else {
      $right-bottom: #{$right-bottom}#{unquote(',')} #{$color} #{$width - $i + px} #{0 + $i + px};
    }
  }
  @for $i from 0 through $width {
    @if $left-top == null {
      $bottom-left: #{$color} #{0 - $i + px} #{$width - $i + px};
    } @else {
      $bottom-left: #{$bottom-left}#{unquote(',')} #{$color} #{0 - $i + px} #{$width - $i + px};
    }
  }

  // 連結すると勝手にカンマが入る。(配列扱い)
  $text-shadow: $left-top $top-right $right-bottom $bottom-left;
  text-shadow: $text-shadow;
}

//————————————————————————————————————————————
// 3 Point Leader
//————————————————————————————————————————————
@mixin leader( $width: 100% ) {
  width: $width;
  max-width: 100%;
  display: block;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}